/// <reference types="node" />
import { Transaction } from './transaction';
export interface Context {
    readonly blockVersion: number;
    readonly blockHeight: number;
    readonly blockTimestamp: number;
}
export declare type Contexter = (() => Context) | Context;
export interface BlockRewardOptions {
    readonly distance: number;
    readonly rewardOffset: number;
    readonly milestones: ReadonlyArray<bigint>;
}
export interface BaseBlockHeader {
    readonly id: Buffer;
    readonly version: number;
    readonly timestamp: number;
    readonly height: number;
    readonly previousBlockID: Buffer;
    readonly transactionRoot: Buffer;
    readonly generatorPublicKey: Buffer;
    readonly reward: bigint;
    readonly signature: Buffer;
}
export declare type RawBlockHeader = BaseBlockHeader & {
    asset: Buffer;
};
export interface RawBlock {
    header: Buffer;
    payload: ReadonlyArray<Buffer>;
}
export interface GenesisBlockHeaderAsset<T = AccountDefaultProps> {
    readonly accounts: ReadonlyArray<Account<T>>;
    readonly initDelegates: ReadonlyArray<Buffer>;
    readonly initRounds: number;
}
export interface BlockHeaderAsset {
    readonly seedReveal: Buffer;
    readonly maxHeightPreviouslyForged: number;
    readonly maxHeightPrevoted: number;
}
export declare type BlockHeader<T = BlockHeaderAsset> = BaseBlockHeader & {
    asset: T;
};
export declare type GenesisBlockHeader<T = AccountDefaultProps> = BaseBlockHeader & {
    asset: GenesisBlockHeaderAsset<T>;
};
export interface Block<T = BlockHeaderAsset> {
    header: BlockHeader<T>;
    payload: ReadonlyArray<Transaction>;
}
export interface GenesisBlock<T = AccountDefaultProps> {
    header: GenesisBlockHeader<T>;
    payload: ReadonlyArray<Transaction>;
}
export interface DiffHistory {
    code: string;
    line: number;
}
export interface StateDiff {
    readonly updated: Array<Readonly<UpdatedDiff>>;
    readonly created: Array<Readonly<string>>;
    readonly deleted: Array<Readonly<UpdatedDiff>>;
}
export interface UpdatedDiff {
    readonly key: string;
    readonly value: Buffer;
}
export interface AccountSchema {
    type: string;
    fieldNumber: number;
    properties: Record<string, unknown>;
    default: Record<string, unknown>;
}
export declare type AccountDefaultProps = {
    [name: string]: {
        [key: string]: unknown;
    } | undefined | Buffer;
};
export declare type Account<T = AccountDefaultProps> = T & {
    address: Buffer;
};
export interface Validator {
    address: Buffer;
    minActiveHeight: number;
    isConsensusParticipant: boolean;
}
export interface GenesisInfo {
    height: number;
    initRounds: number;
}

/// <reference types="node" />
import { EventEmitter } from 'events';
import { P2PConfig, P2PMessagePacket, P2PNodeInfo, P2PPenalty, P2PRequestPacket, P2PResponsePacket, ProtocolPeerInfo, PeerInfo, NetworkStats } from './types';
export declare class P2P extends EventEmitter {
    private readonly _config;
    private readonly _sanitizedPeerLists;
    private _isActive;
    private _hasConnected;
    private readonly _peerBook;
    private readonly _populatorInterval;
    private _nextSeedPeerDiscovery;
    private readonly _fallbackSeedPeerDiscoveryInterval;
    private _populatorIntervalId;
    private _nodeInfo;
    private readonly _peerPool;
    private readonly _secret;
    private readonly _rpcSchemas;
    private _peerServer?;
    private readonly _networkStats;
    private readonly _handlePeerPoolRPC;
    private readonly _handlePeerPoolMessage;
    private readonly _handleDiscoveredPeer;
    private readonly _handleFailedToPushNodeInfo;
    private readonly _handleFailedToSendMessage;
    private readonly _handleOutboundPeerConnect;
    private readonly _handleOutboundPeerConnectAbort;
    private readonly _handlePeerCloseOutbound;
    private readonly _handlePeerCloseInbound;
    private readonly _handleInboundPeerConnect;
    private readonly _handleRemovePeer;
    private readonly _handlePeerInfoUpdate;
    private readonly _handleFailedToFetchPeerInfo;
    private readonly _handleFailedToFetchPeers;
    private readonly _handleFailedPeerInfoUpdate;
    private readonly _handleFailedToCollectPeerDetails;
    private readonly _handleBanPeer;
    private readonly _handleOutboundSocketError;
    private readonly _handleInboundSocketError;
    private readonly _handleFailedInboundPeerConnect;
    constructor(config: P2PConfig);
    get config(): P2PConfig;
    get isActive(): boolean;
    get nodeInfo(): P2PNodeInfo;
    applyNodeInfo(nodeInfo: Omit<P2PNodeInfo, 'nonce'>): void;
    applyPenalty(peerPenalty: P2PPenalty): void;
    getTriedPeers(): ReadonlyArray<ProtocolPeerInfo>;
    getConnectedPeers(): ReadonlyArray<PeerInfo>;
    getDisconnectedPeers(): ReadonlyArray<PeerInfo>;
    getNetworkStats(): NetworkStats;
    request(packet: P2PRequestPacket): Promise<P2PResponsePacket>;
    send(packet: P2PMessagePacket): void;
    broadcast(packet: P2PMessagePacket): void;
    requestFromPeer(packet: P2PRequestPacket, peerId: string): Promise<P2PResponsePacket>;
    sendToPeer(packet: P2PMessagePacket, peerId: string): void;
    start(): Promise<void>;
    stop(): Promise<void>;
    private _handleGetNodeInfo;
    private _bindHandlersToPeerPool;
    private _bindHandlersToPeerServer;
    private _startPopulator;
    private _stopPopulator;
    private _isNetworkReady;
    private _handleGetPeersRequest;
    private _removeListeners;
    private _getBufferData;
}
